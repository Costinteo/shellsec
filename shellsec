#!/usr/bin/env bash

# +-----------------------------------------------------------------+
# |  ______ _     _ _______ _       _        ______ _______ _______ |
# | / _____) |   | |  _____) |     | |      / _____)  _____|  _____)|
# |( (____ | |___| | |___  | |     | |     ( (____ | |___  | |      |
# | \____ \|  ___  |  ___) | |     | |      \____ \|  ___) | |      |
# | _____) ) |   | | |_____| |_____| |_____ _____) ) |_____| |_____ |
# |(______/|_|   |_|_______)_______)_______)______/|_______)_______)|
# +-----------------------------------------------------------------+
# |        Bash tool to generate and manage secure passwords        | 
# |                                                                 |
# |                  https://github.com/Costinteo                   |
# |                          GNU GPL v3+                            |
# +-----------------------------------------------------------------+

# Copyright (c) 2022 Costinteo
#
# shellsec is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as 
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# shellsec is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License 
# along with this program. If not, see <https://www.gnu.org/licenses/>. 


# TODO
# prompt for confirm before deleting
# don't download license
# interactive mode
# replace grep calls with pure bash
# replacement for tr?


# === CLI Arguments ===
# - Flags -
MODE=0     # 0 -> NONE, 1 -> STORE, 2 -> LOAD, 3 -> EDIT, 4 -> DELETE, 5-> ALL_PLATFORMS
USAGE=0    # 1 -> PRINT USAGE
LICENSE=0  # 1 -> PRINT LICENSE
PRINTVER=0 # 1 -> PRINT VERSION
COLOR=1    # 0 -> COLORS OFF, 1 = COLORS ON
VERBOSE=0  # 1 -> VERBOSE OUTPUT
COPY=0     # 1 -> COPY TO CLIPBOARD
PRINT=0    # 1 -> PRINT GENERATED PASSWORD

# - Arguments -
PASSLEN=0
PLATFORM=""

# === Constants ===
LICENSE_LINK="https://www.gnu.org/licenses/gpl-3.0.txt"
SECRET_FILE="$HOME/.shellsec_secret"
ENCRYPTION="aes-256-cbc"
RANDOM_SOURCE="/dev/urandom"
REQUIREMENTS="cat tr grep sed openssl head xclip"

# using semantic versioning <https://semver.org/>
VERSION="1.3.0"

# - Colors -
GREEN='\033[32;01m'
YELLOW='\033[33;01m'
RED='\033[1;31m'
BLUE='\033[34;01m'
PURPLE='\033[35m'
TEXT='\033[0m'


usage() {
	cat <<- _end_of_usage
	Usage: shellsec [OPTIONS]...
	Bash tool to generate and manage secure passwords.
	Run without arguments for interactive mode. [NOT IMPLEMENTED YET]

	Options:
	    -h, --help                print this text and exit
	        --license             print license and exit
	        --version             print version and exit
	        --no-color            suppress colored output
	    -p, --pass <LEN>          generate random pass with <LEN> chars
	    -s, --store <PLATFORM>    store pass for <PLATFORM> *
	    -l, --load <PLATFORM>     load pass for <PLATFORM>
	    -e, --edit <PLATFORM>     edit pass for <PLATFORM> *
	    -d, --delete <PLATFORM>   delete pass for <PLATFORM>
	    -a, --all-platforms       print all platforms
	    -c, --copy                copy pass after generated/loaded
	        --print               print pass after storing/editing

	Options marked with "*" will use the generated pass if ran with "-p/--pass".
	The script is written by Costinteo. <https://github.com/Costinteo>
	Licensed under GNU GPL v3+. <$LICENSE_LINK>
	_end_of_usage

	exit 0
}

# always grabs license from the internet
# kinda silly but...
license() {
	# wget will not be counted as a requirement to run
	wget -q --output-document - "$LICENSE_LINK"
	[ $? -ne 0 ] && printf "${RED}License couldn't be fetched! Check internet connection...${TEXT}\n"
	exit 0
}

version() {
	cat <<- _end_of_version
	shellsec v${VERSION}
	The script is written by Costinteo. <https://github.com/Costinteo>
	Licensed under GNU GPL v3+. <$LICENSE_LINK>
	_end_of_version
	exit 0
}

checkReqs() {
	for req in $REQUIREMENTS
	do
		command -v "$req" 1>/dev/null 2>&1
		[ $? -ne 0 ] && printf "${RED}$req is not installed...${TEXT}\n" && exit 1
	done
}

suppressColors() {
	GREEN=''
	YELLOW=''
	RED=''
	BLUE=''
	PURPLE=''
	TEXT=''
}

# prints usage error message in red and exits
# used when parsing args
usageError() {
	local msg=$1
	1>&2 printf "${RED}$msg${TEXT} See --help for usage.\n" 
	exit 1
}

printError() {
	local msg=$1
	1>&2 printf "${RED}$msg${TEXT}\n"
}

interrupt() {
	printf "\n${YELLOW}Script interrupted...${TEXT}\n"
	# if echo disabled, make sure it is re-enabled
	stty echo
	exit 1
}

getArgs() {
	
	[ $# -eq 0 ] && usage

	while [ $# -ne 0 ]
	do
		case "$1" in
		"-h"|"--help")  USAGE=1    ;;
		"--license")    LICENSE=1  ;;
		"--version")    PRINTVER=1 ;;
		"--no-color")   COLOR=0    ;;

		"-p"|"--pass")
			local numeric='^[0-9]+$'
			[[ ! "$2" =~ $numeric ]] && usageError "Invalid length for password!"
			PASSLEN=$2
			shift
		;;

		"-s"|"--store")           MODE=1  ;;
		"-l"|"--load")            MODE=2  ;;
		"-e"|"--edit")            MODE=3  ;;
		"-d"|"--delete")          MODE=4  ;;
		"-a"|"--all-platforms")   MODE=5  ;;
		"-c"|"--copy")            COPY=1  ;;
		"--print")                PRINT=1 ;;

		*)  usageError "Unkown argument $1!" ;;

		esac

		# if MODE just read, get PLATFORM along with it, if currently empty
		# if MODE is 5 -> no PLATFORM argument
		if [ $MODE -gt 0 ] && [ $MODE -lt 5 ] && [ -z "$PLATFORM" ]; then
			PLATFORM=${2,,}
			[[ "$PLATFORM" =~ [:] ]] && usageError "Forbidden character in platform name!"
			shift
		fi

		shift

	done
}

createSecretFile() {
	touch "$SECRET_FILE"
	chmod 600 "$SECRET_FILE"
}

# $1 = password len
generatePass() {
	local len=$1
	local requiredNumbers=$(( $len/5 ))
	local requiredSymbols=$(( $len/5 ))
	while :
	do
		# generate password until we find one that fits the conditions
		local pass=$(<"$RANDOM_SOURCE" tr -dc '[:graph:]' | head -c $len)
		# this is not implemented too nicely
		# could be nicer if I would collect numbers and symbols
		# and maybe randomly spread them out the pass
		# so it doesn't wait for urandom to find a contiguous string with those conditions
		local numbers=$(tr -d -c '[:digit:]' <<<"$pass") 
		local numericCount=${#numbers}
		local symbols=$(tr -d '[:alnum:]' <<<"$pass")
		local symbolCount=${#symbols}
		# if conditions passed -> break
		[ $numericCount -gt $requiredNumbers ] && [ $symbolCount -gt $requiredSymbols ] && break
	done
	printf "%s" "$pass"
}

# $1 = platform to search for
platformExists() {
	local platform=$1
	grep -ioP -- "^$platform:" "$SECRET_FILE" 1>/dev/null 2>&1
	return $?
}

readSecret() {
	stty -echo
	read "$1"
	stty echo
	echo
}

# $1 = platform to store pass for
# $2 = password to store
storePass() {
	local platform=$1
	local password=$2

	if [ ! -f "$SECRET_FILE" ]; then
		createSecretFile
	else
		platformExists "$platform"
		[ $? -eq 0 ] && printError "Password already saved for platform ${platform}!" && return 1
	fi

	# if no password passed, grab pass from stdin
	if [ -z "$password" ]; then
		1>&2 printf "Password for $platform: "
		readSecret password
	fi

	printf "$platform: " >> "$SECRET_FILE"
	
	if [ -z "$SHELLSEC_MASTERPASS" ]; then
		printf "%s" "$password" | openssl enc -"$ENCRYPTION" -salt -pbkdf2 -a -A >> "$SECRET_FILE"
	else
		printf "%s" "$password" | openssl enc -"$ENCRYPTION" -salt -pbkdf2 -pass env:SHELLSEC_MASTERPASS -a -A >> "$SECRET_FILE"
	fi
	printf "\n" >> "$SECRET_FILE"

}

# $1 = platform to load pass for
loadPass() {
	local platform=$1
	
	platformExists "$platform"
	[ $? -ne 0 ] && printError "No password found for ${platform}..." && return 1
	
	local line=$(grep -iP -- "^${platform}:" "$SECRET_FILE")
	
	# avoid cut
	local encpass=${line##*: }

	if [ -z "$SHELLSEC_MASTERPASS" ]; then
		printf "%s" "$encpass" | openssl enc -"$ENCRYPTION" -salt -pbkdf2 -a -d -A
	else
		printf "%s" "$encpass" | openssl enc -"$ENCRYPTION" -salt -pbkdf2 -pass env:SHELLSEC_MASTERPASS -a -d -A
	fi
}
# $1 = platform to edit pass for
# $2 = new password
editPass() {
	local platform=$1
	local password=$2
	deletePass "$platform"
	[ $? -ne 0 ] && printError "Password deletion failed unexpectedly!" && return 1
	storePass "$platform" "$password"
}

# $1 = platform to delete pass for
deletePass() {
	local platform=$1

	[ ! -f "$SECRET_FILE" ] && printError "No password file found, save a password first to generate..." && return 1

	platformExists "$platform"
	[ $? -ne 0 ] && printError "No password found for platform ${platform}!" && return 1

	sed -ir "/^$platform:/Id" "$SECRET_FILE"
	1>&2 printf "${YELLOW}Password deleted for platform ${BLUE}${platform}${TEXT}.\n"
}

# $1 = password to print
printPass() {
	local pass=$1
	printf "${BLUE}Generated pass:${TEXT} %s\n" "$pass"
}

# $1 = password to copy
copyPass() {
	local pass=$1
	printf "%s" "$pass" | xclip -selection clipboard
	printf "${YELLOW}Password copied to clipboard!${TEXT}\n"
}

printAllPlatforms() {
	[ ! -f "$SECRET_FILE" ] && printError "No password file found!" && return 1
	cat "$SECRET_FILE" | grep -oP --color=none -- "^[^:]+"
}

# does all the magic
shellsec() {

	[ $USAGE    -eq 1 ] && usage
	[ $LICENSE  -eq 1 ] && license
	[ $PRINTVER -eq 1 ] && version
	[ $COLOR    -eq 0 ] && suppressColors

	[ $PASSLEN  -ne 0 ] && local pass=$(generatePass "$PASSLEN")
	
	# 1 -> STORE PASS
	# 2 -> LOAD PASS
	# 3 -> EDIT PASS
	# 4 -> DELETE PASS
	# 5 -> PRINT ALL PLATFORMS
	case "$MODE" in 
	0)
		if [ -n "$pass" ]; then 
			printPass "$pass"
			[ $COPY  -eq 1 ] && copyPass "$pass"
		else 
			usageError "No action chosen!" 
		fi
		;;
	1)
		storePass "$PLATFORM" "$pass"
		if [ $? -eq 0 ]; then
			[ $PRINT -eq 1 ] && printPass "$pass"
			[ $COPY  -eq 1 ] && copyPass "$pass"
		fi
		;;
	2)
		local pass=$(loadPass "$PLATFORM")
		if [ -n "$pass" ]; then
			printf "%s\n" "$pass"
			[ $COPY -eq 1 ] && copyPass "$pass"
		fi
		;;
	3)
		editPass "$PLATFORM" "$pass"
		if [ $? -eq 0 ]; then
			[ $PRINT -eq 1 ] && printPass "$pass"
			[ $COPY  -eq 1 ] && copyPass "$pass"
		fi
		;;
	4)  deletePass "$PLATFORM"  ;;
	5)  printAllPlatforms  ;;
	*)  printError "Unexpected error has occured. Exiting..." && exit 1 ;;
	esac

}

# === MAIN ===

trap interrupt SIGINT

checkReqs
getArgs "$@"
shellsec
